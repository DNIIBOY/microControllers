
Hello World.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c8  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a8  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028c  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
  uint8_t i;
  uint8_t gentag;
  uint8_t hvilkenLED;
  uint8_t randomNumber = 0x1234;

  DDRD |= 0xFF;
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a b9       	out	0x0a, r24	; 10

  while (1){
    for (i = 0; i < 8; i++){
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	15 c0       	rjmp	.+42     	; 0xb4 <main+0x34>
      PORTD |= (1 << i);
  8a:	3b b1       	in	r19, 0x0b	; 11
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 2e       	mov	r0, r18
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x18>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <main+0x14>
  9c:	83 2b       	or	r24, r19
  9e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	3f e7       	ldi	r19, 0x7F	; 127
  a2:	86 e2       	ldi	r24, 0x26	; 38
  a4:	94 e0       	ldi	r25, 0x04	; 4
  a6:	31 50       	subi	r19, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
  uint8_t randomNumber = 0x1234;

  DDRD |= 0xFF;

  while (1){
    for (i = 0; i < 8; i++){
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	28 30       	cpi	r18, 0x08	; 8
  b6:	48 f3       	brcs	.-46     	; 0x8a <main+0xa>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	16 c0       	rjmp	.+44     	; 0xe8 <main+0x68>
      PORTD |= (1 << i);
      _delay_ms(FORSINKELSE);
    }

    for (i = 0; i < 8; i++){
      PORTD &= ~(1 << i);
  bc:	3b b1       	in	r19, 0x0b	; 11
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x4a>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x46>
  ce:	80 95       	com	r24
  d0:	83 23       	and	r24, r19
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	3f e7       	ldi	r19, 0x7F	; 127
  d6:	86 e2       	ldi	r24, 0x26	; 38
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	31 50       	subi	r19, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x64>
  e4:	00 00       	nop
    for (i = 0; i < 8; i++){
      PORTD |= (1 << i);
      _delay_ms(FORSINKELSE);
    }

    for (i = 0; i < 8; i++){
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	28 30       	cpi	r18, 0x08	; 8
  ea:	40 f3       	brcs	.-48     	; 0xbc <main+0x3c>
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	30 ec       	ldi	r19, 0xC0	; 192
  f0:	84 e1       	ldi	r24, 0x14	; 20
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7c>
  fc:	00 00       	nop
      PORTD &= ~(1 << i);
      _delay_ms(FORSINKELSE);
    }
    _delay_ms(5 * FORSINKELSE);

    for (i = 7; i < 255; i--){
  fe:	27 e0       	ldi	r18, 0x07	; 7
 100:	15 c0       	rjmp	.+42     	; 0x12c <main+0xac>
      PORTD |= (1 << i);
 102:	3b b1       	in	r19, 0x0b	; 11
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 2e       	mov	r0, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <main+0x90>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <main+0x8c>
 114:	83 2b       	or	r24, r19
 116:	8b b9       	out	0x0b, r24	; 11
 118:	9f e7       	ldi	r25, 0x7F	; 127
 11a:	36 e2       	ldi	r19, 0x26	; 38
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	91 50       	subi	r25, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x9e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa8>
 128:	00 00       	nop
      PORTD &= ~(1 << i);
      _delay_ms(FORSINKELSE);
    }
    _delay_ms(5 * FORSINKELSE);

    for (i = 7; i < 255; i--){
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	2f 3f       	cpi	r18, 0xFF	; 255
 12e:	49 f7       	brne	.-46     	; 0x102 <main+0x82>
 130:	27 e0       	ldi	r18, 0x07	; 7
 132:	15 c0       	rjmp	.+42     	; 0x15e <main+0xde>
      PORTD |= (1 << i);
      _delay_ms(FORSINKELSE);
    }

    for (i = 7; i < 255; i--){
      PORTD &= (1 << i);
 134:	3b b1       	in	r19, 0x0b	; 11
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0xc2>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <main+0xbe>
 146:	83 23       	and	r24, r19
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	9f e7       	ldi	r25, 0x7F	; 127
 14c:	36 e2       	ldi	r19, 0x26	; 38
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	91 50       	subi	r25, 0x01	; 1
 152:	30 40       	sbci	r19, 0x00	; 0
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xd0>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xda>
 15a:	00 00       	nop
    for (i = 7; i < 255; i--){
      PORTD |= (1 << i);
      _delay_ms(FORSINKELSE);
    }

    for (i = 7; i < 255; i--){
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	2f 3f       	cpi	r18, 0xFF	; 255
 160:	49 f7       	brne	.-46     	; 0x134 <main+0xb4>
 162:	9f e7       	ldi	r25, 0x7F	; 127
 164:	20 ec       	ldi	r18, 0xC0	; 192
 166:	34 e1       	ldi	r19, 0x14	; 20
 168:	91 50       	subi	r25, 0x01	; 1
 16a:	20 40       	sbci	r18, 0x00	; 0
 16c:	30 40       	sbci	r19, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xe8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xf2>
 172:	00 00       	nop
      PORTD &= (1 << i);
      _delay_ms(FORSINKELSE);
    }
    _delay_ms(5 * FORSINKELSE);
    for (gentag = 0; gentag < 75; gentag++){
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e c0       	rjmp	.+28     	; 0x194 <main+0x114>
      randomNumber = 2053 * randomNumber + 13849;
      hvilkenLED = (randomNumber >> 8) & 0b00000111;
      PORTD ^= (1<<hvilkenLED);
 178:	2b b1       	in	r18, 0x0b	; 11
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	82 27       	eor	r24, r18
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	8f e7       	ldi	r24, 0x7F	; 127
 182:	26 e2       	ldi	r18, 0x26	; 38
 184:	34 e0       	ldi	r19, 0x04	; 4
 186:	81 50       	subi	r24, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	30 40       	sbci	r19, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x106>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x110>
 190:	00 00       	nop
    for (i = 7; i < 255; i--){
      PORTD &= (1 << i);
      _delay_ms(FORSINKELSE);
    }
    _delay_ms(5 * FORSINKELSE);
    for (gentag = 0; gentag < 75; gentag++){
 192:	9f 5f       	subi	r25, 0xFF	; 255
 194:	9b 34       	cpi	r25, 0x4B	; 75
 196:	80 f3       	brcs	.-32     	; 0x178 <main+0xf8>
      randomNumber = 2053 * randomNumber + 13849;
      hvilkenLED = (randomNumber >> 8) & 0b00000111;
      PORTD ^= (1<<hvilkenLED);
      _delay_ms(FORSINKELSE);
    }
    PORTD = 0;
 198:	1b b8       	out	0x0b, r1	; 11
 19a:	8f e7       	ldi	r24, 0x7F	; 127
 19c:	96 e2       	ldi	r25, 0x26	; 38
 19e:	24 e0       	ldi	r18, 0x04	; 4
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x120>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x12a>
 1aa:	00 00       	nop
 1ac:	6c cf       	rjmp	.-296    	; 0x86 <main+0x6>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
